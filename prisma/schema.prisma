generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  roles     String   @default("user")
  
  // Relations
  dancers        Dancer[]
  registrations  Registration[] @relation("ReviewedBy")

  @@map("users")
}

model Dancer {
  id          Int                 @id @default(autoincrement())
  userId      Int                 @unique
  email       String
  firstName   String
  lastName    String
  birthDate   DateTime
  postalCode  String
  city        String
  address     String
  phone       String
  schoolLevel dancers_schoolLevel
  tShirtSize  dancers_tShirtSize
  otherInfo   String?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  
  // Relations
  user              User               @relation(fields: [userId], references: [id])
  emergencyContacts EmergencyContact[]
  registrations     Registration[]
  guardian          Guardian?

  @@index([userId], map: "dancers_userId_fkey")
  @@map("dancers")
}

model EmergencyContact {
  id        Int                     @id @default(autoincrement())
  dancerId  Int
  type      emergency_contacts_type
  firstName String
  lastName  String
  phone     String
  email     String?
  relationship String
  createdAt DateTime                @default(now())
  updatedAt DateTime                @updatedAt
  
  // Relations
  dancer Dancer @relation(fields: [dancerId], references: [id])

  @@index([dancerId], map: "emergency_contacts_dancerId_fkey")
  @@map("emergency_contacts")
}

model DanceGroup {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String
  schedule    String
  ageGroup    String
  ageMin      Int?     // Age minimum requis (optionnel pour les groupes sans restriction)
  ageMax      Int?     // Age maximum autoris√© (optionnel pour les groupes sans restriction)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  registrations Registration[]

  @@map("dance_groups")
}

model Registration {
  id           Int                  @id @default(autoincrement())
  dancerId     Int
  danceGroupId Int
  schoolYear   String @default("2024-2025") // Format: "2024-2025"
  sportCode    String?
  status       registrations_status @default(DRAFT)
  submittedAt  DateTime?
  reviewedAt   DateTime?
  reviewedBy   Int?
  notes        String?
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  
  // Relations
  dancer     Dancer     @relation(fields: [dancerId], references: [id])
  danceGroup DanceGroup @relation(fields: [danceGroupId], references: [id])
  reviewer   User?      @relation("ReviewedBy", fields: [reviewedBy], references: [id])

  @@unique([dancerId, danceGroupId, schoolYear])
  @@index([danceGroupId], map: "registrations_danceGroupId_fkey")
  @@index([reviewedBy], map: "registrations_reviewedBy_fkey")
  @@index([schoolYear], map: "registrations_schoolYear_idx")
  @@map("registrations")
}

model Guardian {
  id         Int      @id @default(autoincrement())
  dancerId   Int      @unique
  email      String
  firstName  String
  lastName   String
  relationship String
  address    String
  postalCode String
  city       String
  phone      String
  authorized Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // Relations
  dancer Dancer @relation(fields: [dancerId], references: [id])

  @@map("guardians")
}

enum emergency_contacts_type {
  EMERGENCY_AND_PICKUP
  EMERGENCY_ONLY
  PICKUP_ONLY
}

enum registrations_status {
  DRAFT
  SUBMITTED
  APPROVED
  REJECTED
}

enum dancers_schoolLevel {
  CP
  CE1
  CE2
  CM1
  CM2
  SIXIEME
  CINQUIEME
  QUATRIEME
  TROISIEME
  SECONDE
  PREMIERE
  TERMINALE
  POST_BAC
  ADULTE
}

enum dancers_tShirtSize {
  XS
  S
  M
  L
  XL
  XXL
}
